GUID = {
  menu = {"91109a", "67c526"},
  deckBag = "c2d48a",
  market = "16af7d",
  boards = {
    ["Red"]   = "e25926",
    ["Purple"]= "6aa6d7",
    ["Blue"]  = "6c4a9a",
    ["Green"] = "1fe138" }
}

menuButtons = {
  { -- Menu 1
    {name="Macaws",     x=-0.675, z=-0.895},
    {name="Pandas",     x=-0.675, z=-0.681},
    {name="Racoons",    x=-0.675, z=-0.465},
    {name="Squirrels",  x=-0.675, z=-0.259},
    {name="Ocelots",    x=-0.675, z=-0.045},
    {name="Chameleons", x=-0.675, z= 0.168},

    {name="Platypuses",   x=0.095, z=-0.895},
    {name="Sloths",     x=0.095, z=-0.688},
    {name="Crocodiles", x=0.095, z=-0.400},
    {name="Foxes",      x=0.095, z=-0.198},
    {name="Polecats",   x=0.095, z= 0.087},
    {name="Owls",       x=0.095, z= 0.291},

    {name="Beavers", x=-0.69, z=0.708},
  },
  {
    {name="Monitors",       x=-0.69, z=-0.895},
    {name="Lemurs",         x=-0.69, z=-0.6},
    {name="Magpies",        x=-0.69, z=-0.307},
    {name="Echidnas",       x=-0.69, z=-0.055},
    {name="Hares",          x=-0.69, z= 0.198},
    {name="Tree-kangaroos", x=-0.69, z= 0.545},

    {name="Penguins",  x=0.07, z=-0.895},
    {name="Tuataras",  x=0.07, z=-0.687},
    {name="Turtles",   x=0.07, z=-0.48},
    {name="Devils",    x=0.07, z=-0.279},
    {name="Pangolins", x=0.07, z=-0.074},
    {name="Gulls",     x=0.07, z= 0.35},
    {name="Mongooses", x=0.07, z= 0.553},
    {name="Bats",      x=0.07, z= 0.76},
  }
}

boardPositions = {
  {0.03968, 0.12, -0.8},
  {0.03968, 0.12, -0.4},
  {0.03968, 0.12, 0},
  {0.03968, 0.12, 0.4},
  {0.03968, 0.12, 0.8},
  deck = {-7.90, 0.98, -0.25},
  discard = {7.90, 0.98, -0.25},
  junk = {
    {-16.00, 1.03, 0.00},
    {16.00, 1.03, 0.00}
  },
  player = {
    deck = {1.25, 0.12, 0.47},
    discard = {-1.25, 0.12, 0.47},
  },
}

gameStarted = false
market = {}
boards = {}

function onLoad(saveJSON)
  save=JSON.decode(saveJSON)
  if save!=nil then
    gameStarted=save.gameStarted
  end

  market = getObjectFromGUID(GUID.market)
  market.interactable = false

  local temp = {
    scale = {1,1,1},
    color = {1,1,1,0},
    width = 75,
    height= 50,
  }
  for j=1,2 do
    local menu = getObjectFromGUID(GUID.menu[j])
    for i,button in ipairs(menuButtons[j]) do
      temp.position = {button.x, 0.1, button.z}
      temp.click_function = "click"..button.name
      temp.tooltip=button.name

      Global.setVar("click"..button.name, function(obj, color, alt_click)
        clickHandler(obj, color, alt_click, button.name)
      end)

      menu.createButton(temp)
    end
  end

  if gameStarted then
    createRefillButton()
  else
    market.createButton({
      position={0,1,0},
      rotation={0,90,0},
      scale={0.5,0.5,0.5},
      width=550,
      height=300,
      label="Start",
      font_size=200,
      click_function="setup",
    })
  end

  for _,color in ipairs(Player.getAvailableColors()) do
    boards[color] = getObjectFromGUID(GUID.boards[color])
    local board = boards[color]
    if board != nil then
      board.interactable = false
      local func = "useDiscard"..color
      Global.setVar(func, function(obj, player_color, alt_click) if not alt_click then useDiscard(obj) end end)
      board.createButton({
        position={-1.25,0.1,0.62},
        scale={0.1,0.1,0.1},
        width=1200,
        height=700,
        color={1,1,1,1},
        label="Shuffle\ndiscard",
        font_size=300,
        click_function=func,
      })
    end
  end
end

function createRefillButton()
  market.createButton({
    position={-0.55,0,0},
    rotation={0,90,0},
    scale={0.5,0.5,0.5},
    color={1,1,1,1},
    width=800,
    height=200,
    label="Fill Market",
    font_size=140,
    click_function="refillMarket",
  })
end

function useDiscard(board)
  local deck = getPlayerDeck(board)
  local discard = getPlayerDiscard(board)

  if deck!=nil then return end
  if discard==nil then return end

  discard.setRotation(board.getRotation()+Vector(0,0,180))
  discard.shuffle()
  discard.setPositionSmooth(board.positionToWorld(boardPositions.player.deck), false, true)
end

function onSave()
  return JSON.encode({gameStarted=gameStarted})
end

function refillMarket()
  if filling then return end
  filling = true
  local cards = getMarketItems()
  local count = 0
  for i=5,1,-1 do
    if cards[i]==nil then
      for j=i-1,1,-1 do
        if cards[j]!=nil then
          count=count+1
          cards[i]=cards[j]
          cards[j]=nil
          cards[i].setPositionSmooth(market.positionToWorld(boardPositions[i]),false,false)
          break
        end
      end
    end
  end
  local decks = getDecks()
  local deck = decks.deck
  local discard = decks.discard
  local finished = false
  if deck != nil then
    for i=5,1,-1 do
      if i==1 then finished=true end
      if cards[i]==nil then
        local rotation=market.getRotation()+vector(0,90,0)
        if deck.getQuantity()==-1 then
          deck.setRotationSmooth(rotation, false, false)
          deck.setPositionSmooth(market.positionToWorld(boardPositions[i]),false,false)
          break
        elseif deck.getQuantity()>0 then
          deck.takeObject({position=market.positionToWorld(boardPositions[i]),rotation=rotation})
        else
          deck.remainder.setRotationSmooth(rotation, false, false)
          deck.remainder.setPositionSmooth(market.positionToWorld(boardPositions[i]),false,false)
          break
        end
      end

    end
  end
  if not finished then
    if discard!=nil then
      discard.setRotation({0,180,180})
      discard.shuffle()
      discard.setPosition(boardPositions.deck)
      Wait.time(function() filling=false; refillMarket() end, 0.5, 0)
    end
  end
  Wait.time(function() filling=false end, 1, 0)
end

function getMarketItems()
  local cards = {}
  for i=1,#boardPositions do
    cards[i]=findThingAt(market.positionToWorld(boardPositions[i]))
  end
  return cards
end

function getJunkDecks()
  return {
    findThingAt(boardPositions.junk[1]),
    findThingAt(boardPositions.junk[2])
  }
end

function getDecks()
  return {
    deck=findThingAt(boardPositions.deck),
    discard=findThingAt(boardPositions.discard),
  }
end

function getPlayerDeck(board)
  return findThingAt(board.positionToWorld(boardPositions.player.deck))
end

function getPlayerDiscard(board)
  return findThingAt(board.positionToWorld(boardPositions.player.discard))
end

function findThingAt(position)
  local c = Physics.cast({
    type=3,
    origin=position,
    size={0.01,0.01,0.01},
    direction={0,1,0},
    max_distance=0,
    debug=false})
  if #c>0 then
    return c[1].hit_object
  else
    return nil
  end
end

position = 1
function clickHandler(obj, color, alt_click, name)
  if alt_click then return end

  local bag = getObjectFromGUID(GUID.deckBag)
  if bag == nil then broadcastToAll("ERROR: deck bag not found.", {1,0,0}); return end
  if market == nil then broadcastToAll("ERROR: market board not found.", {1,0,0}); return end

  for i,deck in ipairs(bag.getObjects()) do
    if deck.name == name then
      pos = market.positionToWorld(boardPositions[position])
      local deck = bag.takeObject({guid=deck.guid, position=pos, smooth=false})
      position = position%5 + 1
    end
  end
end

function setup()
  local deck = getDecks()
  local junkDeck = getJunkDecks()
  local animafolkDecks = getMarketItems()

  local tmp={}
  for _,d in pairs(animafolkDecks) do
    table.insert(tmp, d)
  end
  animafolkDecks=tmp

  if #animafolkDecks<3 then
    broadcastToAll("Select at least three decks in the compendium on the right side")
    return
  end

  for playerColor in pairs(boards) do
    local board = boards[playerColor]

    for _,d in ipairs(animafolkDecks) do
      local c = d.takeObject({
        position=board.positionToWorld(boardPositions.player.deck),
        rotation=board.getRotation()+vector(0,0,180),
      })
      if not Player[playerColor].seated then
        c.destruct()
      end
    end

    if Player[playerColor].seated then
      local d = junkDeck[1]
      if playerColor=="Blue" or playerColor=="Purple" then
        d = junkDeck[2]
      end

      for i=1,10-#animafolkDecks do
        d.takeObject({
          position=board.positionToWorld(boardPositions.player.deck),
          rotation=board.getRotation()+vector(0,0,180),
        })
      end

      function dealToPlayer()
        local deck = getPlayerDeck(board)
        if deck==nil or deck.getQuantity()<10 then
          Wait.condition(dealToPlayer, || getPlayerDeck(board)!=nil and getPlayerDeck(board).getQuantity()==10, 1, || broadcastToAll("ERROR: player deck not found. Please, report this issue.", {1,0,0}))
          return
        end
        deck.shuffle()
        deck.deal(5, playerColor)
      end
      Wait.time(dealToPlayer,1.5)
    else
      board.destruct()
    end
  end


  animafolkDecks[1].setRotation(market.getRotation()+vector(0,90,180))
  animafolkDecks[1].setPosition(boardPositions.deck)
  local d = group(animafolkDecks)[1]
  d.setName("")
  Wait.time(function() d.shuffle(); refillMarket() end, 1.5)
  market.clearButtons()
  createRefillButton()
  Notes.setNotes("")
  gameStarted = true
end
